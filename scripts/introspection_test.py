#!/usr/bin/python3
import os
import sys
from math import floor, ceil
import argparse

from collections import OrderedDict
import seaborn as sns
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import collections as mc

from ament_index_python.packages import get_package_share_directory

sns.set(
    style="whitegrid",
    font="sans-serif",
    font_scale=3.0,
    color_codes=False,
    palette="deep6"
)
# Latex font
rc = {
    "lines.linewidth": 1.5,
    "text.usetex": True,
    "font.family": "sans-serif",
    "pgf.texsystem": "pdflatex"
}
# mpl.rcParams.update(rc)


class IntrospectionViewer(object):
    """Loco estimator introspection visualizer.
       Visualization tool to analyzed the introspection debug files generated by Loco estimators.
    """
    def __init__(self, debug_filename):
        super(IntrospectionViewer, self).__init__()
        self.debug_filename = debug_filename
        self.debug_file = None

        # Loco data
        self.weights = np.array([])
        self.poses = np.array([])
        self.step_name = ""
        
        # Matplotlib plot object
        self.fig, self.ax = plt.subplots()
        self.fig.canvas.mpl_connect('key_press_event', self.key_event_handler)

    def __enter__(self):
        # Open debug file and grab initisl data
        self.debug_file = open(self.debug_filename, 'r')
        # Parse file to grab initial data
        self.parse_file()

        # Init Seaborn color palette
        self.color_palette = sns.color_palette("husl", self.P)

        # Draw initial data
        self.draw()

        return self

    def __exit__(self, type, value, traceback):
        self.debug_file.close()

    def show(self):
        # Show figure (blocking)
        plt.show()

    def draw(self):
        self.ax.cla()
        self.ax.set_ylim(bottom=0.0, top=np.max(self.weights))
        min_x = np.min(self.poses)
        max_x = np.max(self.poses)
        self.ax.set_xlim(left=min_x - 0.5, right=max_x + 0.5)
        # plt.xticks(np.arange(floor(min_x), ceil(max_x), 1.0))

        # Create LinesCOllection object for plotting the set of lines
        N = self.poses.shape[1] # Number of agents
        lines = np.zeros((self.P * N, 2, 2))
        colors = np.zeros((self.P * N, 3))
        for k in range(self.P):
            # Use the same color for this particle
            for i in range(N):
                colors[k*N + i] = self.color_palette[k]
                lines[k*N + i][0][0] = self.poses[k][i]
                lines[k*N + i][0][1] = 0.0
                lines[k*N + i][1][0] = self.poses[k][i]
                lines[k*N + i][1][1] = self.weights[k]
        lc = mc.LineCollection(lines, colors=colors)
        self.ax.add_collection(lc)
        # Update figure title with current process name
        self.ax.set_title(self.step_name)
        # Draw
        self.fig.canvas.draw()
        self.fig.canvas.flush_events()

    def parse_file(self, cycles=0):
        weights = []
        poses = []
        if cycles > 0:
            # Skip steps (Each cycle is composed of 3 steps: predict/likelihood/resample)
            for _ in range(3*cycles - 1):
                for line in self.debug_file:
                    if line.rstrip() == "---":
                        break
                else:
                    # No more lines
                    print("End of the file")
                    return
        # Parse data
        step = self.debug_file.readline().rstrip()
        for line in self.debug_file:
            if line.rstrip() == "---":
                break
            weight_f, pose_f = line.rstrip().split(':')
            weights.append(float(weight_f))
            poses.append([float(p) for p in pose_f.split(';')])
        else:
            # No more lines
            print("End of the file")
            return
        self.step_name = step
        self.P = len(weights)

        if self.step_name == "likelihood":
            self.weights = np.array(weights)
        else:
            # If not likelihood, weights are all zero. Instead, create a normalized array so particles can be visualized
            self.weights = np.full(self.P, 1.0/self.P)
        self.poses = np.array(poses)
        print("Step: {}".format(self.step_name))
        # print("np Weights: {}".format(self.weights))
        # print("np Poses: {}".format(self.poses))

    def key_event_handler(self, event):
        if event.key == 'n':
            self.parse_file()
            self.draw()
        elif event.key == 'x':
            self.parse_file(cycles=5)
            self.draw()
        

if __name__ == '__main__':
    experiments_dir = os.path.join(get_package_share_directory('loco_launch'), 'experiments')

    parser = argparse.ArgumentParser(description="Loco instrospection analysis",
                                     usage="introspection_test.py [-d experiments_dir] test_name\n")
    parser.add_argument('test_name', help="Test name. Examples: SS_3V, S0_3V_E00, S1_3V_E07")
    parser.add_argument('-d', '--experiments-dir', help="Experiments directory. Default: {}".format(experiments_dir))

    args = parser.parse_args()
    test_name = args.test_name
    if args.experiments_dir:
        experiments_dir = os.path.abspath(args.experiments_dir)

    print("Experiments dir: {}".format(experiments_dir))
    print("Starting introspection analysis of test {}".format(test_name))
    print("Press N to advance one step")
    print("Press X to skip 5 cycles")

    test_file = os.path.join(experiments_dir, test_name, '{}_loco_introspection_debug.txt'.format(test_name))

    with IntrospectionViewer(test_file) as viewer:
        viewer.show()
